"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[45365],{45365:function(e,s,t){t.r(s),t.d(s,{default:function(){return h}});var a=t(2265),n=t(36030),r=t(69004),i=t(80567),l=t(23378),x=t(20487),c=t(57437),o=e=>{let{type:s,children:t,title:a,titleElement:n}=e;return(0,c.jsx)("div",{className:"flex w-full min-w-0 max-w-full flex-col",children:(0,c.jsxs)("div",{className:"bg-primary-4 relative min-w-full",children:[(0,c.jsx)("div",{className:(0,x.Z)("absolute left-0 top-0 h-full w-[3px]",{"bg-orange-100 dark:bg-[#E9632A]":"input"===s,"bg-blue-100 dark:bg-[#6993FF]":"output"===s})}),(0,c.jsxs)("div",{className:"py-3xs px-xs",children:[(0,c.jsx)("div",{className:"mb-5xs text-caption flex items-center font-medium",children:(0,c.jsxs)("span",{className:(0,x.Z)("block",{"text-orange-100 dark:text-[#ca3f00] [&_*]:text-orange-100 [&_*]:dark:text-[#ca3f00]":"input"===s,"text-blue-100 dark:text-[#2e88bd] [&_*]:text-blue-100 [&_*]:dark:text-[#2e88bd]":"output"===s}),children:[a,n]})}),(0,c.jsx)("div",{className:"gap-y-xs flex flex-col",children:t})]})]})})};let d={"sympy__sympy-19637":()=>(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("div",{className:"col-span-full",children:(0,c.jsx)(o,{type:"input",indexNumber:1,title:"Commentary",children:(0,c.jsxs)("p",{children:["This is an example of a good sample which has been verified by annotators for the SWE-bench Verified dataset. The problem statement gives a short but clear demonstration of a bug, and the"," ",(0,c.jsx)("code",{children:"FAIL_TO_PASS"}),"tests directly assert that the example given in the problem statement has been resolved."]})})}),(0,c.jsx)("div",{className:"col-span-full",children:(0,c.jsx)(o,{type:"output",indexNumber:2,title:"Problem statement",children:(0,c.jsxs)("code",{className:"p-xs text-p2 [&_p]:text-p2 bg-secondary-100 whitespace-pre-wrap",children:[(0,c.jsx)("span",{className:"text-primary-60",children:"Unset"}),(0,c.jsxs)("p",{className:"text-syntax-string",children:["kernS: 'kern' referenced before assignment ",(0,c.jsx)("br",{}),"from sympy.core.sympify import kernS ",(0,c.jsx)("br",{}),(0,c.jsx)("br",{}),'text = "(2*x)/(x-1)"',(0,c.jsx)("br",{}),"expr = kernS(text)",(0,c.jsx)("br",{}),"// hit = kern in s",(0,c.jsx)("br",{}),"// UnboundLocalError: local variable 'kern' referenced beforeassignment"]})]})})}),(0,c.jsx)("div",{className:"col-span-full",children:(0,c.jsxs)(o,{type:"input",indexNumber:3,title:"Are the tasks well-specified? (Raw annotation)",children:[(0,c.jsx)("p",{children:"Severity: 0 - The issue is well-specified and it is clear what is required for a successful solution."}),(0,c.jsxs)("p",{className:"text-p2 font-mono",children:["It is clear that kernS is throwing exception for (2*x)/(x-1)",(0,c.jsx)("br",{}),"It provides example input for which the error is occurring which can make it easy to reproduce the issue."]})]})}),(0,c.jsx)("div",{className:"col-span-full",children:(0,c.jsx)(o,{type:"output",indexNumber:4,titleElement:(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("code",{children:"FAIL_TO_PASS"})," test (Only showing lines added during the original PR for brevity)"]}),children:(0,c.jsxs)("code",{className:"p-xs text-p2 bg-secondary-100 whitespace-pre-wrap",children:[(0,c.jsx)("span",{className:"text-primary-60 text-p2",children:"Python"}),(0,c.jsx)("br",{}),(0,c.jsx)("span",{className:"text-syntax-keyword",children:"def"})," test_kernS():",(0,c.jsx)("br",{}),"    ","...",(0,c.jsx)("br",{}),"    ",'assert kernS("',(0,c.jsx)("span",{className:"text-syntax-string",children:"(2*x)/(x-1)"}),'") =='," ",(0,c.jsx)("span",{className:"text-syntax-error",children:"2"}),"*x/(x-1)",(0,c.jsx)("br",{})]})})}),(0,c.jsx)("div",{className:"col-span-full",children:(0,c.jsxs)(o,{type:"input",indexNumber:5,title:"How valid are the evaluation criteria? (Raw annotation)",children:[(0,c.jsx)("p",{children:"Severity: 0 - The tests perfectly cover all possible solutions."}),(0,c.jsxs)("p",{className:"text-p2 font-mono",children:['The test case is exactly for kernS("(2*x)/(x-1)") for which the issue was occurring in issue description. ',(0,c.jsx)("br",{}),"It will cover all possible solutions."]})]})})]}),"scikit-learn__scikit-learn-13779":()=>(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("div",{className:"col-span-full",children:(0,c.jsx)(o,{type:"input",indexNumber:1,title:"Commentary",children:(0,c.jsx)("p",{children:"Here is an example of a borderline case which was kept in the dataset: The issue describes a scenario where the VotingClassifierâ€™s `fit` method fails when any of its estimators are `None`. It does not specify whether the solution should skip such estimators, raise an error, or handle it differently. The tests assume that the solution should no longer fail on the reproducible example, which is a fair expectation given the problem statement. The annotator points out there is ambiguity, but decides that this is not an egregious issue and marks the sample as acceptable for inclusion in the final dataset."})})}),(0,c.jsx)("div",{className:"col-span-full",children:(0,c.jsx)(o,{type:"output",indexNumber:2,title:"Problem statement",children:(0,c.jsxs)("code",{className:"p-xs text-p2 [&_p]:text-p2 bg-secondary-100 whitespace-pre-wrap",children:[(0,c.jsx)("span",{className:"text-primary-60",children:"Unset"}),(0,c.jsxs)("p",{className:"text-syntax-string",children:["Voting estimator will fail at fit if weights are passed and an estimator is None",(0,c.jsx)("br",{}),"Because we don't check for an estimator to be `None` in `sample_weight` support, `fit` is failing`."]}),(0,c.jsxs)("p",{className:"text-syntax-string",children:["```python",(0,c.jsx)("br",{}),"X, y = load_iris(return_X_y=True)",(0,c.jsx)("br",{}),"voter = VotingClassifier(",(0,c.jsx)("br",{}),"estimators=[('lr', LogisticRegression()),",(0,c.jsx)("br",{}),"('rf', RandomForestClassifier())]",(0,c.jsx)("br",{}),")",(0,c.jsx)("br",{}),"voter.fit(X, y, sample_weight=np.ones(y.shape))",(0,c.jsx)("br",{}),"voter.set_params(lr=None)",(0,c.jsx)("br",{}),"voter.fit(X, y, sample_weight=np.ones(y.shape))",(0,c.jsx)("br",{}),"```"]}),(0,c.jsxs)("p",{className:"text-syntax-string",children:["```",(0,c.jsx)("br",{}),"AttributeError: 'NoneType' object has no attribute 'fit'",(0,c.jsx)("br",{}),"```"]})]})})}),(0,c.jsx)("div",{className:"col-span-full",children:(0,c.jsxs)(o,{type:"input",indexNumber:3,title:"Are the tasks well-specified? (Raw annotation)",children:[(0,c.jsx)("p",{children:"Severity: 1 - There are some blanks to fill in about the issue, but there is a sensible interpretation of what is required for a successful solution."}),(0,c.jsx)("p",{className:"text-p2 font-mono",children:"The issue description clearly explains the problem: the VotingClassifier fails during the fit method if one of the estimators is None and sample_weight is provided. It provides a code snippet to reproduce the error, making it clear what needs to be fixed. However, it does not specify the expected behavior when an estimator is None. This leaves some interpretation about whether to ignore None estimators, raise an error, or handle them differently."})]})}),(0,c.jsx)("div",{className:"col-span-full",children:(0,c.jsx)(o,{type:"output",indexNumber:4,title:"FAIL_TO_PASS test (Only showing lines added during the original PR for brevity)",children:(0,c.jsxs)("code",{className:"p-xs text-p2 [&_p]:text-p2 bg-secondary-100 whitespace-pre-wrap",children:[(0,c.jsx)("span",{className:"text-primary-60",children:"Python"}),(0,c.jsx)("br",{}),"@pytest.mark.filterwarnings(",(0,c.jsx)("span",{className:"text-syntax-string",children:"'ignore: Default solver will be changed'"}),") ",(0,c.jsx)("span",{className:"text-syntax-error",children:"# 0.22 "}),(0,c.jsx)("br",{}),"@pytest.mark.filterwarnings(",(0,c.jsx)("span",{className:"text-syntax-string",children:"'ignore: Default multi_class will'"}),") ",(0,c.jsx)("span",{className:"text-syntax-error",children:"# 0.22"}),(0,c.jsx)("br",{}),"@pytest.mark.parametrize( ",(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-string",children:'"X, y, voter"'}),", ",(0,c.jsx)("br",{}),"    ","[(X, y, VotingClassifier( ",(0,c.jsx)("br",{}),"    ","    ","[(",(0,c.jsx)("span",{className:"text-syntax-string",children:"'lr'"}),", LogisticRegression()), ",(0,c.jsx)("br",{}),"    ","    ","(",(0,c.jsx)("span",{className:"text-syntax-string",children:"'rf'"}),", RandomForestClassifier(n_estimators=",(0,c.jsx)("span",{className:"text-syntax-error",children:"5"}),"))])), ",(0,c.jsx)("br",{}),"    ","(X_r, y_r, VotingRegressor( ",(0,c.jsx)("br",{}),"    ","    ","[(",(0,c.jsx)("span",{className:"text-syntax-string",children:"'lr'"}),", LinearRegression()), ",(0,c.jsx)("br",{}),"    ","(",(0,c.jsx)("span",{className:"text-syntax-string",children:"'rf'"}),", RandomForestRegressor(n_estimators=",(0,c.jsx)("span",{className:"text-syntax-error",children:"5"}),"))]))] ",(0,c.jsx)("br",{}),") ",(0,c.jsx)("br",{}),"def test_none_estimator_with_weights(X, y, voter): ",(0,c.jsx)("br",{}),(0,c.jsxs)("span",{className:"text-syntax-error",children:["    ","# check that an estimator can be set to None and passing some weight ",(0,c.jsx)("br",{}),"    ","# regression test for ",(0,c.jsx)("br",{}),"    ","# https://github.com/scikit-learn/scikit-learn/issues/13777"," ",(0,c.jsx)("br",{})]}),"    ","voter.fit(X, y, sample_weight=np.ones(y.shape)) ",(0,c.jsx)("br",{}),"    ","voter.set_params(lr=",(0,c.jsx)("span",{className:"text-purple-100",children:"None"}),") ",(0,c.jsx)("br",{}),"    ","voter.fit(X, y, sample_weight=np.ones(y.shape)) ",(0,c.jsx)("br",{}),"    ","y_pred = voter.predict(X) ",(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," y_pred.shape == y.shape ",(0,c.jsx)("br",{})]})})}),(0,c.jsx)("div",{className:"col-span-full",children:(0,c.jsxs)(o,{type:"input",indexNumber:5,title:"How valid are the evaluation criteria? (Raw annotation)",children:[(0,c.jsx)("p",{children:"Severity: 1 - The tests cover the majority of correct solutions, however some unusual solutions may be missed."}),(0,c.jsx)("p",{className:"text-p2 font-mono",children:"The tests are designed to ensure that the VotingClassifier and VotingRegressor handle None estimators correctly when sample_weight is provided. However, there might be some unusual solutions, such as raising a specific error for None estimators or handling weights differently, that these tests might miss. The tests assume that the correct behavior is to skip None estimators, which covers most reasonable solutions but may not account for all edge cases."})]})})]}),"sympy__sympy-14821":()=>(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("div",{className:"col-span-full",children:(0,c.jsx)(o,{type:"input",indexNumber:1,title:"Commentary",children:(0,c.jsxs)("p",{children:["This is an example where the automatic scraping procedure produces a malformed sample: The problem statement makes a specific complaint about the `zeta` function, but the GitHub issue links two different PRs in the discussion thread: one which correctly resolves the issue and one which contains unrelated fixes. Unfortunately, the SWE-bench scraping process selects the wrong PR, which tests for unrelated functionality. The annotator correctly points out that the",(0,c.jsx)("code",{children:"FAIL_TO_PASS"})," tests cannot be passed in this setup, and flags this sample for removal."]})})}),(0,c.jsx)("div",{className:"col-span-full",children:(0,c.jsx)(o,{type:"output",indexNumber:2,title:"Problem statement",children:(0,c.jsxs)("code",{className:"p-xs text-p2 [&_p]:text-p2 bg-secondary-100 whitespace-pre-wrap",children:[(0,c.jsx)("span",{className:"text-primary-60",children:"Unset"}),(0,c.jsxs)("p",{className:"text-syntax-string",children:["octave/matlab codegen wrong for two argument zeta",(0,c.jsx)("br",{}),"`octave_code(zeta(x,n))` should give `zeta(n, x)`."]}),(0,c.jsx)("p",{className:"text-syntax-string",children:"See: https://www.mathworks.com/help/symbolic/zeta.html"})]})})}),(0,c.jsx)("div",{className:"col-span-full",children:(0,c.jsxs)(o,{type:"input",indexNumber:3,title:"Are the tasks well-specified? (Raw annotation)",children:[(0,c.jsx)("p",{children:"Severity: 0 - The issue is well-specified and it is clear what is required for a successful solution."}),(0,c.jsx)("p",{className:"text-p2 font-mono",children:"The stated issue is that when converting the two-argument zeta function zeta(x, n) from SymPy to Octave/Matlab, the function generates incorrect code."}),(0,c.jsx)("p",{className:"text-p2 font-mono",children:"It is not clear what the current output is, but reproducible code is given from which we can determine what the current output is."})]})}),(0,c.jsx)("div",{className:"col-span-full",children:(0,c.jsx)(o,{type:"output",indexNumber:4,titleElement:(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("code",{children:"FAIL_TO_PASS"})," test (Only showing lines added during the original PR for brevity)"]}),children:(0,c.jsxs)("code",{className:"p-xs text-p2 [&_p]:text-p2 bg-secondary-100 whitespace-pre-wrap",children:[(0,c.jsx)("span",{className:"text-primary-60",children:"Python"}),(0,c.jsxs)("p",{children:[(0,c.jsx)("span",{className:"text-syntax-keyword",children:"def"})," test_Function():",(0,c.jsx)("br",{}),"    ","...",(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," mcode(sign(x)) ==",(0,c.jsx)("span",{className:"text-syntax-string",children:'"sign(x)"'}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," mcode(exp(x)) ==",(0,c.jsx)("span",{className:"text-syntax-string",children:'"exp(x)"'}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," mcode(log(x)) ==",(0,c.jsx)("span",{className:"text-syntax-string",children:'"log(x)"'}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," ","mcode(factorial(x)) ==",(0,c.jsx)("span",{className:"text-syntax-string",children:'"factorial(x)"'}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," mcode(floor(x)) ==",(0,c.jsx)("span",{className:"text-syntax-string",children:'"floor(x)"'}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," mcode(atan2(y, x)) ==",(0,c.jsx)("span",{className:"text-syntax-string",children:'"atan2(y, x)"'}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," mcode(beta(x, y)) ==",(0,c.jsx)("span",{className:"text-syntax-string",children:"'beta(x, y)'"}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," mcode(polylog(x, y)) == ",(0,c.jsx)("span",{className:"text-syntax-string",children:"'polylog(x, y)'"}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," ","mcode(harmonic(x)) ==",(0,c.jsx)("span",{className:"text-syntax-string",children:"'harmonic(x)'"}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," ","mcode(bernoulli(x)) ==",(0,c.jsx)("span",{className:"text-syntax-string",children:'"bernoulli(x)"'}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," ","mcode(bernoulli(x, y)) =="," ",(0,c.jsx)("span",{className:"text-syntax-string",children:'"bernoulli(x, y)"'})]}),(0,c.jsx)("br",{}),(0,c.jsxs)("p",{children:[(0,c.jsx)("span",{className:"text-syntax-keyword",children:"def"})," ","test_Function_change_name():",(0,c.jsx)("br",{}),"    ","...",(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," ","mcode(conjugate(x)) ==",(0,c.jsx)("span",{className:"text-syntax-string",children:'"conj(x)"'}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," ","mcode(chebyshevt(y, x)) =="," ",(0,c.jsx)("span",{className:"text-syntax-string",children:'"chebyshevT(y, x)"'}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," ","mcode(chebyshevu(y, x)) =="," ",(0,c.jsx)("span",{className:"text-syntax-string",children:'"chebyshevU(y, x)"'}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," ","mcode(laguerre(x, y)) =="," ",(0,c.jsx)("span",{className:"text-syntax-string",children:'"laguerreL(x, y)"'}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," mcode(Chi(x)) ==",(0,c.jsx)("span",{className:"text-syntax-string",children:' "coshint(x)"'}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," mcode(Shi(x)) ==",(0,c.jsx)("span",{className:"text-syntax-string",children:' "sinhint(x)"'}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," mcode(Ci(x)) ==",(0,c.jsx)("span",{className:"text-syntax-string",children:' "cosint(x)"'}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," mcode(Si(x)) ==",(0,c.jsx)("span",{className:"text-syntax-string",children:' "sinint(x)"'}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," mcode(li(x)) ==",(0,c.jsx)("span",{className:"text-syntax-string",children:' "logint(x)"'}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," ","mcode(loggamma(x)) ==",(0,c.jsx)("span",{className:"text-syntax-string",children:' "gammaln(x)"'}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," ","mcode(polygamma(x, y)) =="," ",(0,c.jsx)("span",{className:"text-syntax-string",children:'"psi(x, y)"'}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"}),"mcode(RisingFactorial(x, y)) ==",(0,c.jsx)("span",{className:"text-syntax-string",children:' "pochhammer(x, y)"'}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," ","mcode(DiracDelta(x)) =="," ",(0,c.jsx)("span",{className:"text-syntax-string",children:'"dirac(x)"'}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," ","mcode(DiracDelta(x,",(0,c.jsx)("span",{className:"text-syntax-error",children:"3"}),")) =="," ",(0,c.jsx)("span",{className:"text-syntax-string",children:'"dirac(3, x)"'}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," ","mcode(Heaviside(x)) ==",(0,c.jsx)("span",{className:"text-syntax-string",children:' "heaviside(x)"'}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," ","mcode(Heaviside(x, y)) =="," ",(0,c.jsx)("span",{className:"text-syntax-string",children:' "heaviside(x, y)"'})]}),(0,c.jsx)("br",{}),(0,c.jsxs)("p",{children:[(0,c.jsx)("span",{className:"text-syntax-keyword",children:"def"})," ","test_KroneckerDelta():",(0,c.jsx)("br",{}),"    ","from sympy.functions import KroneckerDelta",(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"}),"mcode(KroneckerDelta(x, y)) =="," ",(0,c.jsx)("span",{className:"text-syntax-string",children:'"double(x == y)"'}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"}),"mcode(KroneckerDelta(x, y +"," ",(0,c.jsx)("span",{className:"text-syntax-error",children:"1"}),")) =="," ",(0,c.jsx)("span",{className:"text-syntax-string",children:'"double(x == (y + 1))"'}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"}),"mcode(KroneckerDelta(",(0,c.jsx)("span",{className:"text-syntax-error",children:"2"}),"**x, y)) =="," ",(0,c.jsx)("span",{className:"text-syntax-string",children:'"double((2.^x) == y)"'})]}),(0,c.jsx)("br",{}),(0,c.jsxs)("p",{children:[(0,c.jsx)("span",{className:"text-syntax-keyword",children:"def"})," ","test_octave_expint():",(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," mcode(expint(",(0,c.jsx)("span",{className:"text-syntax-error",children:"1"}),", x)) ==",(0,c.jsx)("span",{className:"text-syntax-string",children:' "expint(x)"'}),(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," mcode(expint(",(0,c.jsx)("span",{className:"text-syntax-error",children:"2"}),", x)) == (",(0,c.jsx)("br",{}),(0,c.jsxs)("span",{className:"text-syntax-string",children:["    ","    ",'"% Not supported in Octave:\\n"',(0,c.jsx)("br",{}),"    ","    ",'"% expint\\n"',(0,c.jsx)("br",{}),"    "," ","    ",'"expint(2, x)"']}),(0,c.jsx)("br",{}),"    ",")",(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," mcode(expint(y, x)) == (",(0,c.jsx)("br",{}),(0,c.jsxs)("span",{className:"text-syntax-string",children:["    ","    ",'"% Not supported in Octave:\\n"',(0,c.jsx)("br",{}),"    ","    ",'"% expint\\n"',(0,c.jsx)("br",{}),"    ","    ",'"expint(y, x)"']}),(0,c.jsx)("br",{}),"    ",")"]}),(0,c.jsx)("br",{}),(0,c.jsxs)("p",{children:[(0,c.jsx)("span",{className:"text-syntax-keyword",children:"def"})," test_trigfun():",(0,c.jsx)("br",{}),"    ","for f in (sin, cos, tan, cot, sec, csc, asin, acos, acot, atan, asec, acsc, sinh, cosh, tanh, coth, csch, sech, asinh, acosh, atanh, acoth, asech, acsch):",(0,c.jsx)("br",{}),"    ","    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," octave_code(f(x) == f.__name__ + ",(0,c.jsx)("span",{className:"text-syntax-string",children:"'(x)'"}),")"]}),(0,c.jsx)("br",{}),(0,c.jsxs)("p",{children:[(0,c.jsx)("span",{className:"text-syntax-keyword",children:"def"})," test_specfun():",(0,c.jsx)("br",{}),"    ","...",(0,c.jsx)("br",{}),"    ","for f in (erfc, erfi, erf, erfinv, erfcinv, fresnelc, fresnels, gamma):",(0,c.jsx)("br",{}),"    ","    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," ","octave_code(f(x)) == f.__name__ +"," ",(0,c.jsx)("span",{className:"text-syntax-string",children:"'(x)'"}),(0,c.jsx)("br",{}),"    ","..."]})]})})}),(0,c.jsx)("div",{className:"col-span-full",children:(0,c.jsxs)(o,{type:"input",indexNumber:5,title:"How valid are the evaluation criteria? (Raw annotation)",children:[(0,c.jsx)("p",{children:"Severity: 3 - The tests are too narrow/broad or they look for something different than what the issue is about."}),(0,c.jsx)("p",{className:"text-p2 font-mono",children:"The PR tests for improvements and bug fixes unrelated to the specific issue request."}),(0,c.jsx)("p",{className:"text-p2 font-mono",children:"If someone only addressed the specific issue given (correctly handling the two-argument zeta function in Octave/Matlab code generation) without making the additional changes, the extra asserts introduced in the pull request would likely lead to test failures."})]})})]}),"sphinx-doc__sphinx-9665":()=>(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("div",{className:"col-span-full",children:(0,c.jsx)(o,{type:"input",indexNumber:1,title:"Commentary",children:(0,c.jsx)("p",{children:"In this sample, the problem statement relies on externally linked issues and PRs for details of the problem. The SWE-bench setup assumes that agents donâ€™t have access to the internet, so this problem statement is insufficient for agents to understand the task. The annotator correctly marks this sample as underspecified, and it is removed from the dataset."})})}),(0,c.jsx)("div",{className:"col-span-full",children:(0,c.jsx)(o,{type:"output",indexNumber:2,title:"Problem statement",children:(0,c.jsxs)("code",{className:"p-xs text-p2 [&_p]:text-p2 bg-secondary-100 whitespace-pre-wrap",children:[(0,c.jsx)("span",{className:"text-primary-60",children:"Unset"}),(0,c.jsxs)("p",{className:"text-syntax-string",children:["python bases in packages - follow up on #4944",(0,c.jsx)("br",{}),"**Is your feature request related to a problem? Please describe.**",(0,c.jsx)("br",{}),"Same problem as described in #4944",(0,c.jsx)("br",{})]}),(0,c.jsxs)("p",{className:"text-syntax-string",children:["**Describe the solution you'd like**",(0,c.jsx)("br",{}),"sphinx checks if the base class is documented somewhere. If yes, it inserts the reference to the corresponding page automatically.",(0,c.jsx)("br",{})]}),(0,c.jsxs)("p",{className:"text-syntax-string",children:["**Describe alternatives you've considered**",(0,c.jsx)("br",{}),"As originally proposed in #3104, allow `autodoc-process-signature` to return a list of strings that will be appended to `Bases: `",(0,c.jsx)("br",{})]}),(0,c.jsxs)("p",{className:"text-syntax-string",children:["**Additional context**",(0,c.jsx)("br",{}),"#4944 was marked as closed by #9233, but that PR unfortunately doesn't solve the problem: While I now can return a different base class, I still can't control the text of the hyperlink for that class.",(0,c.jsx)("br",{}),"With `autodoc-process-signature` being allowed to return strings, one could just return something like ``':class:`telegram.TelegramObject`'``",(0,c.jsx)("br",{})]}),(0,c.jsx)("p",{className:"text-syntax-string",children:"PS: maybe we can just reopen #4944 and continue discussion there â€¦"})]})})}),(0,c.jsx)("div",{className:"col-span-full",children:(0,c.jsxs)(o,{type:"input",indexNumber:3,title:"Are the tasks well-specified? (Raw annotation)",children:[(0,c.jsx)("p",{children:"Severity: 3 - It is almost impossible to understand what you are being asked to do without further information."}),(0,c.jsx)("p",{className:"text-p2 font-mono",children:"The issue description only references another issue and provides a link to a comment for further details. It lacks context, a clear problem statement, and specific details necessary to understand the issue or how to address it, making it almost impossible to proceed without additional information."})]})}),(0,c.jsx)("div",{className:"col-span-full",children:(0,c.jsx)(o,{type:"output",indexNumber:4,titleElement:(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("code",{children:"FAIL_TO_PASS"})," test (Only showing lines added during the original PR for brevity)"]}),children:(0,c.jsxs)("code",{className:"p-xs text-p2 [&_p]:text-p2 bg-secondary-100 whitespace-pre-wrap",children:[(0,c.jsx)("span",{className:"text-primary-60",children:"Python"}),(0,c.jsx)("br",{}),(0,c.jsx)("span",{className:"text-syntax-keyword",children:"def"})," test_restify():",(0,c.jsx)("br",{}),"    ","...",(0,c.jsx)("br",{}),"    ",(0,c.jsx)("span",{className:"text-syntax-keyword",children:"assert"})," restify(",(0,c.jsx)("span",{className:"text-syntax-string",children:"'str'"}),") =="," ",(0,c.jsx)("span",{className:"text-syntax-string",children:'"str"'})]})})}),(0,c.jsx)("div",{className:"col-span-full",children:(0,c.jsxs)(o,{type:"input",indexNumber:5,title:"How valid are the evaluation criteria? (Raw annotation)",children:[(0,c.jsx)("p",{children:"Severity: 2 - The tests work but some perfectly reasonable solutions may be missed by the tests."}),(0,c.jsx)("p",{className:"text-p2 font-mono",children:"The test checks only that a string input to `restify` returns unchanged, which is a direct test of the implementation in the gold patch. It doesn't cover broader or different implementations that might also address the issue requirements."})]})})]})};var h=()=>{let e=(0,l.t)(),s=(0,a.useRef)(null),{0:t,1:x}=(0,a.useState)("sympy__sympy-19637"),{0:o,1:h}=(0,a.useState)(!1),{height:p=0}=(0,n.yU)({ref:s,box:"border-box"}),m=d[t];return(0,c.jsxs)("div",{className:"pt-4xs relative overflow-hidden",style:{maxHeight:o?"none":"1400px"},children:[(0,c.jsx)("div",{className:"max-w-container",ref:s,children:(0,c.jsxs)("div",{className:"grid grid-cols-12",children:[(0,c.jsxs)("div",{className:"col-span-full flex items-center md:col-span-6 md:col-start-4",children:[(0,c.jsx)("span",{className:"mr-4xs block",children:e.formatMessage({id:"nPP52Y",defaultMessage:[{type:0,value:"Select sample:"}]})}),(0,c.jsx)(i.Z,{className:"flex-1",name:"",options:[{label:"sympy__sympy-19637",value:"sympy__sympy-19637",id:"sympy__sympy-19637"},{label:"scikit-learn__scikit-learn-13779",value:"scikit-learn__scikit-learn-13779",id:"scikit-learn__scikit-learn-13779"},{label:"sympy__sympy-14821",value:"sympy__sympy-14821",id:"sympy__sympy-14821"},{label:"sphinx-doc__sphinx-9665",value:"sphinx-doc__sphinx-9665",id:"sphinx-doc__sphinx-9665"}],onChange:e=>{x(e.id)}})]}),(0,c.jsx)("div",{className:"mt-sm col-span-full md:col-span-6 md:col-start-4",children:(0,c.jsx)("div",{className:"gap-sm grid",style:{wordBreak:"break-word",overflowWrap:"break-word"},children:(0,c.jsx)(m,{})})})]})}),!o&&p>1400&&(0,c.jsx)("div",{className:"to-base py-sm absolute bottom-0 flex w-full justify-center bg-gradient-to-b from-transparent to-50%",children:(0,c.jsx)(r.default,{variant:"primary-button",onClick:()=>{h(!0)},children:e.formatMessage({id:"63YhLx",defaultMessage:[{type:0,value:"See full sample"}]})})})]})}}}]);